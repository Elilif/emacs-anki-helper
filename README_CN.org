* Anki-helper(WIP)
* 为什么用 Anki-helper
目前辅助 Anki 制卡的插件主要是 [[https://github.com/eyeinsky/org-anki][eyeinsky/org-anki]] 和 [[https://github.com/louietan/anki-editor][louietan/anki-editor]] 。

anki-editor 我只是很浅的用了一下，马上就被它的格式要求给劝退了： anki-editor 需
要使用专门的标题行来标记卡片的正反面。这首先导致原有的笔记不能快速转化为卡片，需
要自己转换；其次制作好的卡片几乎只能由 anki-editor 使用，无法融入到现有的工作流
中，需要专门的文件来存放。

org-anki 比较好地解决了上述缺点，它使用当前的标题栏作为正面，笔记内容作为反面。
这正好和我记笔记的方式吻合，原有的笔记马上就能拿来制卡，也不需要专门的文件。所以
org-anki 我用了很长一段时间，通过pdf-tools + org-note + org-anki 实践渐进式阅读，
已经读了很多大部头的书。

org-anki 的缺点如下：

1. 同步速度慢

  org-anki 同步笔记实在是太慢了。我经常需要修改卡片，对于卡片比较多的文件，同步
  简直是个噩梦。

  以 [[examples/headings.org]] 为例， org-anki 和 anki-helper 同步和删除所有卡片
  （ 422张）的时间对比如下：

  |             | (benchmark 1 '(xxx-sync-all))     | (benchmark 1 '(xxx-delete-all))   |
  |-------------+-----------------------------------+-----------------------------------|
  | org-anki    | 123.855104s (35.423518s in 5 GCs) | 150.862886s (21.709634s in 8 GCs) |
  | anki-helper | 0.410945s                         | 0.098308s                         |
   
2. 仅支持 heading

   org-anki 的另外一个问题是它只适用于 heading ，没有提供 API 来添加自定义的卡片
   制做函数。一个 heading 一张卡片的好处一是可以保存卡片的信息，如卡片 ID，是否
   已经修改等，方便后续修改；二是可以对不同的 heading 进行不同操作。但是有些类型
   的卡片是不需要这类额外的信息的，一个常见的例子就是单词卡片。我需要只是收集生
   词，然后同步到 Anki ，后续几乎不会修改。显然一个单词一个 heading 是比较浪费的。

   最重要的一点是每个人的习惯不一样，所以必须要提供一套足够灵活的 API 来方便用户
   创建自己的卡片制作函数。

3. 缺乏多媒体内容处理
   针对图片处理的 PR 还没有合并，其他多媒体内容也不支持。


我认为 anki-helper 比较好的解决了上述了个问题，同时增加了其他特点：

1. 尽可能地保持原始文本内容不变
   对于 Cloze 类型的卡片来说，常规的做法是使用 ~{{c1:xxx}}~ 这种形式，但是这会破坏
   原有内容，不利于其他操作。这其实是一种变相的专有化。我在设计 anki-helper 的时
   候注意到 org 文件在导出到 html 的时候，默认情况下 code 和 verbatim 都会变成
   ~<code>~ 标签。所以考虑是不是能够将其中的一个拿来充当 Cloze 的标记。经过一番尝
   试过后我发现效果不错。如果你有下述文本：
   #+begin_example
     =Canberra= was founded in =1913=.
   #+end_example
   在制卡的过程中，它会变成如下格式：
   #+begin_example
     {{c1::Canberra}} was founded in {{c2::1913}}.
   #+end_example

   *注意*: 此功能由变量 ~anki-helper-cloze-use-verbatim~ 控制，默认情况下关闭。同时
   不支持下述类型的转化：
   #+begin_example
     {{c1::Canberra}} was founded in {{c1::1913}}.
   #+end_example
* 安装
** 依赖
1. Anki
2. [[https://github.com/FooSoft/anki-connect][FooSoft/anki-connect]]
3. curl
** 使用 package.el 安装
~M-x package-vc-install RET https://github.com/Elilif/emacs-anki-helper RET~
** 手动安装
#+begin_src elisp
  (add-to-list 'load-path "path-to-anki-helper")
  (require 'anki-helper)
#+end_src
* 用法

